@page "/"

@inject IProductService productService

@if (ProductList == null)
{
    <p>Loading products...</p>
}
else
{
    <h3 class="mb-5">Products</h3>
    var productCount = ProductList.Count();

    @if (productCount > 0)
    {
         const int itemsPerRow = 4;
        var productRowList = new List<ProductDto>();


        @for (int i = 0; i < productCount; i++)
        {
            productRowList = ProductList.Skip(i * itemsPerRow).Take(itemsPerRow).ToList();
            
        var groupedProductCategory = from product in ProductList
                                     group product by product.CategoryId into prodByCatGroup
                                     orderby prodByCatGroup.Key
                                     select prodByCatGroup;


        @foreach (var prodGroup in groupedProductCategory)
        {
            <h4>@prodGroup.FirstOrDefault(pg => pg.CategoryId == prodGroup.Key).CategoryName</h4>
            <div class="row mt-3">
                <DisplayProducts Products="@prodGroup"></DisplayProducts>
            </div>
            <hr class="mb-3"/>
        }


        }
    }
}

@code {
    private IEnumerable<ProductDto> ProductList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProductList = await productService.GetItems();
    }
}
